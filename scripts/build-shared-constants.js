#!/usr/bin/env node

const fs = require('fs/promises');
const path = require('path');

const SOURCE_GAME_PATH = path.resolve(__dirname, '..', 'shared', 'constants', 'game.json');
const TARGET_GAME_PATH = path.resolve(__dirname, '..', 'public', 'js', 'shared', 'gameConstants.js');
const SOURCE_ASSETS_PATH = path.resolve(__dirname, '..', 'shared', 'constants', 'assets.json');
const TARGET_ASSETS_PATH = path.resolve(__dirname, '..', 'public', 'js', 'shared', 'assetManifest.js');

const toExportName = (key) => key
  .replace(/([a-z0-9])([A-Z])/g, '$1_$2')
  .replace(/[-\s]/g, '_')
  .toUpperCase();

const generateGameModuleSource = (payload) => {
  const lines = [];
  lines.push('// This file is auto-generated by scripts/build-shared-constants.js.');
  lines.push('// Do not edit this file directly. Update shared/constants/game.json instead.');
  lines.push('');
  lines.push('const deepFreeze = (object) => {');
  lines.push('  if (object && typeof object === "object" && !Object.isFrozen(object)) {');
  lines.push('    Object.keys(object).forEach((key) => {');
  lines.push('      const value = object[key];');
  lines.push('      if (value && typeof value === "object") {');
  lines.push('        deepFreeze(value);');
  lines.push('      }');
  lines.push('    });');
  lines.push('    Object.freeze(object);');
  lines.push('  }');
  lines.push('  return object;');
  lines.push('};');
  lines.push('');
  lines.push(`const GAME_CONSTANTS = deepFreeze(${JSON.stringify(payload, null, 2)});`);
  lines.push('');
  lines.push('export { GAME_CONSTANTS };');
  lines.push('');

  Object.keys(payload).forEach((key) => {
    const exportName = toExportName(key);
    lines.push(`export const ${exportName} = GAME_CONSTANTS.${key};`);
  });

  lines.push('');
  return lines.join('\n');
};

const generateAssetModuleSource = (payload) => {
  const lines = [];
  lines.push('// This file is auto-generated by scripts/build-shared-constants.js.');
  lines.push('// Do not edit this file directly. Update shared/constants/assets.json instead.');
  lines.push('');
  lines.push('const deepFreeze = (object) => {');
  lines.push('  if (object && typeof object === "object" && !Object.isFrozen(object)) {');
  lines.push('    Object.keys(object).forEach((key) => {');
  lines.push('      const value = object[key];');
  lines.push('      if (value && typeof value === "object") {');
  lines.push('        deepFreeze(value);');
  lines.push('      }');
  lines.push('    });');
  lines.push('    Object.freeze(object);');
  lines.push('  }');
  lines.push('  return object;');
  lines.push('};');
  lines.push('');
  lines.push(`const ASSET_MANIFEST = deepFreeze(${JSON.stringify(payload, null, 2)});`);
  lines.push('');
  lines.push('export { ASSET_MANIFEST };');
  lines.push('export default ASSET_MANIFEST;');
  lines.push('');
  return lines.join('\n');
};

async function main() {
  const [gameRaw, assetsRaw] = await Promise.all([
    fs.readFile(SOURCE_GAME_PATH, 'utf8'),
    fs.readFile(SOURCE_ASSETS_PATH, 'utf8')
  ]);

  const gamePayload = JSON.parse(gameRaw);
  const assetsPayload = JSON.parse(assetsRaw);

  const gameModuleSource = generateGameModuleSource(gamePayload);
  const assetModuleSource = generateAssetModuleSource(assetsPayload);

  await Promise.all([
    fs.mkdir(path.dirname(TARGET_GAME_PATH), { recursive: true }),
    fs.mkdir(path.dirname(TARGET_ASSETS_PATH), { recursive: true })
  ]);

  await Promise.all([
    fs.writeFile(TARGET_GAME_PATH, `${gameModuleSource}\n`, 'utf8'),
    fs.writeFile(TARGET_ASSETS_PATH, `${assetModuleSource}\n`, 'utf8')
  ]);
}

main().catch((error) => {
  console.error('Failed to build shared game constants artifact:', error);
  process.exit(1);
});
